name: CPython GMIC Optimized Python package (Source and Debian/Ubuntu OS compilation)
# For development purpose only, our fastest build chain with testing and without pypi sending

# Prevent running job on tag-based release
on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - '!v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.7]

    steps:
    - uses: actions/checkout@v1
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Compile and run tests on .so, .whl and source distribution
      working-directory: ./
      env:
        # TWINE_PASSWORD_GITHUB_SECRET: ${{ secrets.TWINE_PASSWORD_GITHUB_SECRET }} # For build_tools.bash 11_send_to_pypi
        PYTHON3: python3
        PIP3: pip3
        GMIC_VERSION: 2.9.0
      run: |
        for apt_file in `grep -lr microsoft /etc/apt/sources.list.d/`; do sudo rm $apt_file; done
        sudo apt-get update; sudo apt-get install -y libfftw3-dev libcurl4-openssl-dev libpng-dev zlib1g-dev libomp5 libomp-dev
        sudo apt-get install clang-format
        # bash build_tools.bash 00_all_steps 
        bash build_tools.bash 21_check_c_style # should stop this script on style error
        bash build_tools.bash 23_check_python_style # should stop this script on style error

        bash build_tools.bash 1_clean_and_regrab_gmic_src
        bash build_tools.bash 2_compile #2b_compile_debug
        bash build_tools.bash 3b_test_compiled_so_no_numpy #3_test_compiled_so
        # && bash build_tools.bash 11_send_to_pypi #Note that most probably nothing will be sent to PyPI because of too modern linked libraries 
    - name: upload .so optimized build dir as artifact
      uses: actions/upload-artifact@v2
      with:
        name: gmic-py-ubuntu-optimized-build-dir
        path: build/
