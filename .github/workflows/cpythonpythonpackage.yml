name: CPython GMIC Debug Python package (Source and Debian/Ubuntu OS compilation)
# For development purpose only, our fastest build chain with testing and without pypi sending

on:
  push:
    branches:
      - '*'
    tags-ignore:
      - v*

jobs:
  grab-full-source-and-python:
    - runs-on: ubuntu-latest
    - uses: actions/checkout@v1
    - name: Set up Python 3.7
      uses: actions/setup-python@v1
      with:
        python-version: 3.7
    - name: Detect G'MIC target version
      run: |
        echo "GHA_GMIC_VERSION=$(GHA_QUIET=1 bash build_tools.bash __get_py_package_version)" >> $GITHUB_ENV

    - name: Grab ligmic
      run: |
        bash build_tools.bash 1_clean_and_regrab_gmic_src


  check-code-style:
    runs-on: ubuntu-latest
    needs: grab-full-source-and-python
    steps:
      - name: Check C/C++ style
        run: |
          sudo apt-get install clang-format
          bash build_tools.bash 21_check_c_style # should stop this script on style error
      - name: Check Python style
        run: |
          bash build_tools.bash 23_check_python_style # should stop this script on style error

  build-linux-debug-test-norelease:
    needs: check-code-style

    runs-on: ubuntu-latest

    steps:

    - name: Detect G'MIC target version
      run: echo "GHA_GMIC_VERSION=$(GHA_QUIET=1 bash build_tools.bash __get_py_package_version)" >> $GITHUB_ENV


    - name: Compile and run tests on .so, .whl and source distribution of gmic-py ${{ env.GHA_GMIC_VERSION }}
      working-directory: ./
      env:
        # TWINE_PASSWORD_GITHUB_SECRET: ${{ secrets.TWINE_PASSWORD_GITHUB_SECRET }} # For build_tools.bash 11_send_to_pypi
        PYTHON3: python3
        PIP3: pip3
      run: |
        for apt_file in `grep -lr microsoft /etc/apt/sources.list.d/`; do sudo rm $apt_file; done
        sudo apt-get update; sudo apt-get install -y libfftw3-dev libcurl4-openssl-dev libpng-dev zlib1g-dev libomp5 libomp-dev

        bash build_tools.bash 2b_compile_debug
        ldd build/lib.linux-x86_64-3.*/gmic.cpython-3*-x86_64-linux-gnu.so
        # bash build_tools.bash 3_test_compiled_so # TODO tests exceptionnally disabled for remote testing
        # && bash build_tools.bash 11_send_to_pypi #Note that most probably nothing will be sent to PyPI because of too modern linked libraries 
    - name: upload .so debug build dir as artifact
      uses: actions/upload-artifact@v2
      with:
        name: gmic-py-ubuntu-debug-build-dir
        path: build/
